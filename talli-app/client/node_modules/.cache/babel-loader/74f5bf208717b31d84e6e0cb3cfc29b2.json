{"ast":null,"code":"import _classCallCheck from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/src/components/OrganizerView/Dialogs/ExportOrgData.js\";\nimport React from 'react';\nimport { Slide, Dialog, DialogTitle, DialogContent, DialogActions, Button, FormControlLabel, Switch } from '@material-ui/core';\nimport qr from 'qr-image';\nimport jsPDF from 'jspdf';\n\nvar config = require('../../../config.json');\n\nfunction Transition(props) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }));\n}\n\nvar ExportOrgData =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ExportOrgData, _React$Component);\n\n  function ExportOrgData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ExportOrgData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ExportOrgData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      open: false,\n      exportEntry: true,\n      exportEvent: true\n    };\n\n    _this.toggleEntryExport = function () {\n      _this.setState({\n        exportEntry: !_this.state.exportEntry\n      });\n    };\n\n    _this.toggleEventExport = function () {\n      _this.setState({\n        exportEvent: !_this.state.exportEvent\n      });\n    };\n\n    _this.handleOpen = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.generatePDF = function () {\n      if (_this.state.exportEntry || _this.state.exportEvent) {\n        // set up document\n        var doc = new jsPDF(\"portrait\", \"mm\", \"letter\");\n        var title, qr_code;\n        var contents = '';\n\n        if (_this.state.exportEvent) {\n          // add event qr code\n          contents = \"Event\";\n          title = \"Event ID: \" + _this.props.event.id;\n          qr_code = qr.imageSync(config.Global.hostURL + \"/vote/\" + _this.props.event.id);\n          doc.addImage(qr_code, 'PNG', 58, 20, 100, 100); // (image, type, x, y, w, h)\n\n          doc.text(_this.props.event.name, 108, 20, \"center\"); // (string, x, y, align)\n\n          doc.text(title, 108, 125, \"center\");\n        }\n\n        if (_this.state.exportEntry) {\n          // add entry qr codes\n          contents = contents + \"Entries\";\n          var entry;\n\n          for (var entryID in _this.props.event.entries) {\n            entry = _this.props.event.entries[entryID];\n            doc.addPage();\n            title = \"Entry ID: \" + entry['id'];\n            qr_code = qr.imageSync(config.Global.entryQRPrefix + String(entry['id']));\n            doc.addImage(qr_code, 'PNG', 58, 20, 100, 100);\n            doc.text(entry['title'], 108, 20, \"center\");\n            doc.text(title, 108, 125, \"center\");\n          }\n        } // save document to local machine\n\n\n        var nameNoSpaces = _this.props.event.name.replace(/\\s+/g, '');\n\n        doc.save(nameNoSpaces + contents + 'QRCodes.pdf');\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ExportOrgData, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        open: this.state.open,\n        TransitionComponent: Transition,\n        onClose: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \" Export \"), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: this.state.exportEvent,\n          onChange: function onChange() {\n            return _this2.toggleEventExport();\n          },\n          value: this.state.exportEvent,\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }),\n        label: \"Export Event QR\",\n        labelPlacement: \"start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: this.state.exportEntry,\n          onChange: function onChange() {\n            return _this2.toggleEntryExport();\n          },\n          value: this.state.exportEntry,\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }),\n        label: \"Export Entry QR\",\n        labelPlacement: \"start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        onClick: this.generatePDF,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Export QR to PDF\")), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClose,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Go Back\"))));\n    }\n  }]);\n\n  return ExportOrgData;\n}(React.Component);\n\nexport { ExportOrgData as default };","map":{"version":3,"sources":["/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/src/components/OrganizerView/Dialogs/ExportOrgData.js"],"names":["React","Slide","Dialog","DialogTitle","DialogContent","DialogActions","Button","FormControlLabel","Switch","qr","jsPDF","config","require","Transition","props","ExportOrgData","state","open","exportEntry","exportEvent","toggleEntryExport","setState","toggleEventExport","handleOpen","handleClose","generatePDF","doc","title","qr_code","contents","event","id","imageSync","Global","hostURL","addImage","text","name","entry","entryID","entries","addPage","entryQRPrefix","String","nameNoSpaces","replace","save","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Slide, Dialog, DialogTitle, DialogContent, DialogActions, Button, FormControlLabel, Switch } from '@material-ui/core';\r\nimport qr from 'qr-image';\r\nimport jsPDF from 'jspdf';\r\nvar config = require('../../../config.json');\r\n\r\nfunction Transition(props) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nexport default class ExportOrgData extends React.Component {\r\n    state = {\r\n        open: false,\r\n        exportEntry: true,\r\n        exportEvent: true\r\n    };\r\n\r\n    toggleEntryExport = () => {\r\n        this.setState({\r\n            exportEntry: !this.state.exportEntry,\r\n        });\r\n    }\r\n\r\n    toggleEventExport = () => {\r\n        this.setState({\r\n            exportEvent: !this.state.exportEvent,\r\n        });\r\n    }\r\n\r\n    handleOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    generatePDF = () => {\r\n        if (this.state.exportEntry || this.state.exportEvent) {\r\n            // set up document\r\n            var doc = new jsPDF(\"portrait\", \"mm\", \"letter\");\r\n            var title, qr_code;\r\n            var contents = '';\r\n\r\n            if (this.state.exportEvent) {\r\n                // add event qr code\r\n                contents = \"Event\";\r\n                title = \"Event ID: \" + this.props.event.id;\r\n                qr_code = qr.imageSync((config.Global.hostURL + \"/vote/\") + this.props.event.id);\r\n                doc.addImage(qr_code, 'PNG', 58, 20, 100, 100); // (image, type, x, y, w, h)\r\n                doc.text(this.props.event.name, 108, 20, \"center\"); // (string, x, y, align)\r\n                doc.text(title, 108, 125, \"center\");\r\n            }\r\n\r\n            if (this.state.exportEntry) {\r\n                // add entry qr codes\r\n                contents = contents + \"Entries\";\r\n                var entry;\r\n                for (var entryID in this.props.event.entries) {\r\n                    entry = this.props.event.entries[entryID];\r\n                    doc.addPage();\r\n                    title = \"Entry ID: \" + entry['id'];\r\n                    qr_code = qr.imageSync(config.Global.entryQRPrefix + String(entry['id']));\r\n                    doc.addImage(qr_code, 'PNG', 58, 20, 100, 100);\r\n                    doc.text(entry['title'], 108, 20, \"center\");\r\n                    doc.text(title, 108, 125, \"center\");\r\n                }\r\n            }\r\n            // save document to local machine\r\n            var nameNoSpaces = this.props.event.name.replace(/\\s+/g, '');\r\n            doc.save(nameNoSpaces + contents + 'QRCodes.pdf');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Dialog open={this.state.open} TransitionComponent={Transition} onClose={this.handleClose}>\r\n                    <DialogTitle> Export </DialogTitle>\r\n                    <DialogContent>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.exportEvent}\r\n                                    onChange={() => this.toggleEventExport()}\r\n                                    value={this.state.exportEvent}\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Export Event QR\"\r\n                            labelPlacement=\"start\"\r\n                        /> <br/>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.exportEntry}\r\n                                    onChange={() => this.toggleEntryExport()}\r\n                                    value={this.state.exportEntry}\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Export Entry QR\"\r\n                            labelPlacement=\"start\"\r\n                        /><br/>\r\n                        <Button variant=\"contained\" onClick={this.generatePDF}>Export QR to PDF</Button>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"primary\">Go Back</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}