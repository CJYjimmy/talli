{"ast":null,"code":"import _classCallCheck from \"/Users/chenjiayuan/CS3312/talli/talli-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chenjiayuan/CS3312/talli/talli-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chenjiayuan/CS3312/talli/talli-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chenjiayuan/CS3312/talli/talli-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chenjiayuan/CS3312/talli/talli-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chenjiayuan/CS3312/talli/talli-app/client/src/components/OrganizerView/EventList.js\";\nimport React, { Component } from 'react';\nimport { Typography, Grid, Button } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport '../component_style/Organizer.css';\nimport firebase from '../../firebase';\n/**\r\n * OrganizerView > EventList\r\n * Organizer landing page which shows them all\r\n * of their events and the option to add a new one.\r\n */\n\nvar EventList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventList, _Component);\n\n  function EventList(props) {\n    var _this;\n\n    _classCallCheck(this, EventList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventList).call(this, props));\n    _this.state = {\n      events: []\n    };\n    return _this;\n  }\n\n  _createClass(EventList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var googleId = this.props.user.googleId;\n      var query = firebase.database().ref(\"organizer/\".concat(googleId, \"/event\"));\n      var allEvents = [];\n      query.on('value', function (snapshot) {\n        var events = snapshot.val();\n\n        for (var event in events) {\n          var refPrefix = \"\".concat(event, \"/eventData\");\n          var id = snapshot.child(\"\".concat(refPrefix, \"/id\")).val();\n          var name = snapshot.child(\"\".concat(refPrefix, \"/name\")).val();\n          var location = snapshot.child(\"\".concat(refPrefix, \"/location\")).val();\n          var startDate = snapshot.child(\"\".concat(refPrefix, \"/startDate\")).val();\n          var endDate = snapshot.child(\"\".concat(refPrefix, \"/endDate\")).val();\n          var automate = snapshot.child(\"\".concat(refPrefix, \"/automate\")).val();\n          var startVote = snapshot.child(\"\".concat(refPrefix, \"/startVote\")).val();\n          var endVote = snapshot.child(\"\".concat(refPrefix, \"/endVote\")).val();\n          allEvents.push({\n            id: id,\n            name: name,\n            location: location,\n            startDate: startDate,\n            endDate: endDate,\n            automate: automate,\n            startVote: startVote,\n            endVote: endVote\n          });\n        }\n\n        _this2.setState({\n          events: allEvents\n        });\n      });\n    }\n  }, {\n    key: \"parseDate\",\n    value: function parseDate(isoDate) {\n      var dateString = \"\".concat(isoDate.substring(5, 7), \"/\").concat(isoDate.substring(8, 10), \"/\").concat(isoDate.substring(0, 4));\n      return dateString;\n    }\n  }, {\n    key: \"AddEvent\",\n    value: function AddEvent() {\n      this.props.handler(this.props.orgViews.CREATE);\n    }\n  }, {\n    key: \"viewEvent\",\n    value: function viewEvent(id) {\n      this.props.setEvent(id);\n      this.props.handler(this.props.orgViews.VIEW);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h4\",\n        align: \"center\",\n        gutterBottom: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, sessionStorage.getItem('name'), \"'s Events\"), React.createElement(Grid, {\n        container: true,\n        className: \"organizerEvents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        className: \"eventContainer\",\n        id: \"addEvent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(AddCircleIcon, {\n        color: \"primary\",\n        id: \"addCircleIcon\",\n        onClick: function onClick() {\n          return _this3.AddEvent();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), this.state.events.map(function (event, index) {\n        return React.createElement(Button, {\n          className: \"eventContainer\",\n          variant: \"contained\",\n          color: \"primary\",\n          id: \"openEvent\",\n          onClick: function onClick() {\n            return _this3.viewEvent(event.id);\n          },\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, event.name, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }), _this3.parseDate(event.startDate), \" - \", _this3.parseDate(event.endDate), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }), \"Voting period is \", event.automate ? \"automated.\" : \"not automated.\");\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EventList;\n}(Component);\n\nexport { EventList as default };","map":{"version":3,"sources":["/Users/chenjiayuan/CS3312/talli/talli-app/client/src/components/OrganizerView/EventList.js"],"names":["React","Component","Typography","Grid","Button","AddCircleIcon","firebase","EventList","props","state","events","googleId","user","query","database","ref","allEvents","on","snapshot","val","event","refPrefix","id","child","name","location","startDate","endDate","automate","startVote","endVote","push","setState","isoDate","dateString","substring","handler","orgViews","CREATE","setEvent","VIEW","sessionStorage","getItem","AddEvent","map","index","viewEvent","parseDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Typography, Grid, Button } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport '../component_style/Organizer.css';\r\nimport firebase from '../../firebase';\r\n\r\n/**\r\n * OrganizerView > EventList\r\n * Organizer landing page which shows them all\r\n * of their events and the option to add a new one.\r\n */\r\nexport default class EventList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            events: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const googleId = this.props.user.googleId;\r\n        const query = firebase.database().ref(`organizer/${googleId}/event`);\r\n        const allEvents = [];\r\n        query.on('value', (snapshot) => {\r\n            const events = snapshot.val();\r\n            for (let event in events) {\r\n                const refPrefix = `${event}/eventData`;\r\n                const id = snapshot.child(`${refPrefix}/id`).val();\r\n                const name = snapshot.child(`${refPrefix}/name`).val();\r\n                const location = snapshot.child(`${refPrefix}/location`).val();\r\n                const startDate = snapshot.child(`${refPrefix}/startDate`).val();\r\n                const endDate = snapshot.child(`${refPrefix}/endDate`).val();\r\n                const automate = snapshot.child(`${refPrefix}/automate`).val();\r\n                const startVote = snapshot.child(`${refPrefix}/startVote`).val();\r\n                const endVote = snapshot.child(`${refPrefix}/endVote`).val();\r\n\r\n                allEvents.push({\r\n                    id,\r\n                    name,\r\n                    location,\r\n                    startDate,\r\n                    endDate,\r\n                    automate,\r\n                    startVote,\r\n                    endVote\r\n                });\r\n            }\r\n            this.setState({\r\n                events: allEvents\r\n            });\r\n        });\r\n    }\r\n\r\n    parseDate(isoDate) {\r\n        const dateString = `${isoDate.substring(5, 7)}/${isoDate.substring(8, 10)}/${isoDate.substring(0, 4)}`;\r\n        return dateString;\r\n    }\r\n\r\n    AddEvent() {\r\n        this.props.handler(this.props.orgViews.CREATE);\r\n    }\r\n\r\n    viewEvent(id) {\r\n        this.props.setEvent(id);\r\n        this.props.handler(this.props.orgViews.VIEW);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h4\" align=\"center\" gutterBottom>{sessionStorage.getItem('name')}&apos;s Events</Typography>\r\n                <Grid container className=\"organizerEvents\">\r\n                    <Grid item className=\"eventContainer\" id=\"addEvent\">\r\n                        <AddCircleIcon color=\"primary\" id=\"addCircleIcon\" onClick={() => this.AddEvent()} />\r\n                    </Grid>\r\n                    {this.state.events.map((event, index) => (\r\n                        <Button\r\n                            className=\"eventContainer\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            id=\"openEvent\"\r\n                            onClick={() => this.viewEvent(event.id)}\r\n                            key={index}\r\n                        >\r\n                            {event.name}\r\n                            <br />\r\n                            {this.parseDate(event.startDate)} - {this.parseDate(event.endDate)}\r\n                            <br />\r\n                            <br />\r\n                            Voting period is {event.automate ? \"automated.\" : \"not automated.\"}\r\n                        </Button>\r\n                    ))}\r\n                </Grid>\r\n                <div />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}