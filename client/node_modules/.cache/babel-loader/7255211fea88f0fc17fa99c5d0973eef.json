{"ast":null,"code":"import _classCallCheck from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chenjiayuan/junior_design/talli/client/src/components/OrganizerView/AddEntryOrg.js\";\nimport React, { Component } from 'react';\nimport { Typography, Button, Divider } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport NewEntryForm from './NewEntryForm';\nimport EntryImportInfo from './Dialogs/EntryImportInfo';\nimport '../component_style/Organizer.css';\nimport firebase from '../../firebase';\n/**\n * OrganizerView > AddEntryOrg\n * Allows organizers to add entries to their event\n * after setting up the event details (NewEventForm).\n */\n\nvar AddEntryOrg =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddEntryOrg, _Component);\n\n  function AddEntryOrg(props) {\n    var _this;\n\n    _classCallCheck(this, AddEntryOrg);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddEntryOrg).call(this, props));\n\n    _this.openInfo = function () {\n      _this.infoPopup.current.handleOpen();\n    };\n\n    _this.addEntry = function () {\n      var newEntries = _this.state.entries.slice();\n\n      newEntries.push({\n        show: true,\n        title: '',\n        id: '',\n        presenters: '',\n        entryDates: ''\n      });\n\n      _this.setState({\n        entries: newEntries,\n        alert: _this.state.alert\n      });\n    };\n\n    _this.cancelAddition = function () {\n      _this.props.handler(_this.props.orgViews.MAIN);\n    };\n\n    _this.readCSV = function (event) {\n      var f = event.target.files[0];\n\n      if (f) {\n        var r = new FileReader();\n        var a;\n\n        r.onload = function (e) {\n          var contents = r.result;\n          a = r.result;\n          var lines = contents.split(/[\\r\\n]+/g);\n          var tempEnt = [];\n          var line;\n          var lineTitle;\n          var linePres;\n          var lineDate;\n          var lineURL;\n\n          for (var i = 1; i < lines.length; i++) {\n            line = lines[i].split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n            if (line.length !== 3 && line.length !== 0 && line.length !== 4) {\n              a = 'File format is incorrect. Please see \"Import Requirements\" for correct formatting.';\n\n              _this.setState({\n                entries: _this.state.entries,\n                alert: a\n              });\n\n              return;\n            }\n\n            lineTitle = line[0];\n            linePres = line[1];\n            lineDate = line[2];\n            lineURL = line[3] ? line[3] : '';\n\n            if (lineTitle && linePres && lineDate) {\n              tempEnt.push({\n                show: true,\n                title: lineTitle,\n                id: '',\n                presenters: linePres,\n                entry_dates: lineDate,\n                info_url: lineURL\n              });\n            } else {\n              a = 'Some required data is missing. Please see \"Import Requirements\" for correct formatting.';\n\n              _this.setState({\n                entries: _this.state.entries,\n                alert: a\n              });\n\n              return;\n            }\n          } // concat entries here\n\n\n          a = \"Success! Entries from \".concat(f.name, \" were imported.\");\n\n          _this.setState({\n            entries: _this.state.entries.concat(tempEnt),\n            alert: a\n          });\n        };\n\n        r.readAsText(f);\n      } else {\n        _this.setState({\n          alert: 'Unable to read file.'\n        });\n      }\n    };\n\n    _this.state = {\n      entries: [],\n      alert: ''\n    };\n    _this.infoPopup = React.createRef();\n    return _this;\n  }\n\n  _createClass(AddEntryOrg, [{\n    key: \"updateEntry\",\n    value: function updateEntry(status, idx) {\n      var updateEntries = this.state.entries;\n      updateEntries[idx] = status;\n      this.setState({\n        entries: updateEntries,\n        alert: this.state.alert\n      });\n    }\n  }, {\n    key: \"submitEntries\",\n    value: function submitEntries() {\n      // DATABASE:\n      // add the entries with shown = true in this.state.entries\n      // to the current event\n      var googleId = this.props.user.googleId;\n      var eventID = this.props.curEvent;\n      var base = 1000 + Math.floor(Math.random() * 8000 + 1);\n\n      for (var i = 0; i < this.state.entries.length; i++) {\n        var item = this.state.entries[i];\n\n        if (item.show) {\n          item.id = base + i;\n          var itemsRef = firebase.database().ref(\"organizer/\".concat(googleId, \"/event/\").concat(eventID, \"/entries\"));\n          itemsRef.child(item.id).set(item);\n        }\n      }\n\n      this.props.handler(this.props.orgViews.VIEW);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var entries = this.state.entries;\n      return React.createElement(\"div\", {\n        className: \"addEntryForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(EntryImportInfo, {\n        ref: this.infoPopup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"h4\",\n        align: \"center\",\n        gutterBottom: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Add Entries\"), React.createElement(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        className: \"buttons\",\n        name: \"import_entries\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Import Entries\", React.createElement(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        style: {\n          display: 'none'\n        },\n        onChange: function onChange(e) {\n          return _this2.readCSV(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"subtitle1\",\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.state.alert), React.createElement(Button, {\n        variant: \"text\",\n        className: \"buttons\",\n        onClick: this.openInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Click here for import requirements.\"), React.createElement(Divider, {\n        variant: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        className: \"entryForm\",\n        onSubmit: function onSubmit() {\n          return _this2.submitEntries();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, entries.map(function (val, idx) {\n        return React.createElement(\"div\", {\n          key: val.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(NewEntryForm, {\n          currValue: val,\n          updateEntry: function updateEntry(status, index) {\n            return _this2.updateEntry(status, index);\n          },\n          index: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }));\n      }), React.createElement(AddCircleIcon, {\n        color: \"primary\",\n        id: \"entryIcon\",\n        onClick: this.addEntry,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        className: \"buttons\",\n        type: \"button\",\n        onClick: this.cancelAddition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Done\")));\n    }\n  }]);\n\n  return AddEntryOrg;\n}(Component);\n\nexport { AddEntryOrg as default };","map":{"version":3,"sources":["/Users/chenjiayuan/junior_design/talli/client/src/components/OrganizerView/AddEntryOrg.js"],"names":["React","Component","Typography","Button","Divider","AddCircleIcon","NewEntryForm","EntryImportInfo","firebase","AddEntryOrg","props","openInfo","infoPopup","current","handleOpen","addEntry","newEntries","state","entries","slice","push","show","title","id","presenters","entryDates","setState","alert","cancelAddition","handler","orgViews","MAIN","readCSV","event","f","target","files","r","FileReader","a","onload","e","contents","result","lines","split","tempEnt","line","lineTitle","linePres","lineDate","lineURL","i","length","entry_dates","info_url","name","concat","readAsText","createRef","status","idx","updateEntries","googleId","user","eventID","curEvent","base","Math","floor","random","item","itemsRef","database","ref","child","set","VIEW","display","submitEntries","map","val","index","updateEntry"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Typography, Button, Divider } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport NewEntryForm from './NewEntryForm';\nimport EntryImportInfo from './Dialogs/EntryImportInfo';\nimport '../component_style/Organizer.css';\nimport firebase from '../../firebase';\n\n/**\n * OrganizerView > AddEntryOrg\n * Allows organizers to add entries to their event\n * after setting up the event details (NewEventForm).\n */\nexport default class AddEntryOrg extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            entries: [],\n            alert: ''\n        };\n        this.infoPopup = React.createRef();\n    }\n\n    openInfo = () => {\n        this.infoPopup.current.handleOpen();\n    }\n\n    addEntry = () => {\n        const newEntries = this.state.entries.slice();\n        newEntries.push({\n            show: true,\n            title: '',\n            id: '',\n            presenters: '',\n            entryDates: ''\n        });\n        this.setState({\n            entries: newEntries,\n            alert: this.state.alert\n        });\n    }\n\n    updateEntry(status, idx) {\n        const updateEntries = this.state.entries;\n        updateEntries[idx] = status;\n        this.setState({\n            entries: updateEntries,\n            alert: this.state.alert\n        });\n    }\n\n    cancelAddition = () => {\n        this.props.handler(this.props.orgViews.MAIN);\n    }\n\n    submitEntries() {\n        // DATABASE:\n        // add the entries with shown = true in this.state.entries\n        // to the current event\n        const googleId = this.props.user.googleId;\n        const eventID = this.props.curEvent;\n        const base = 1000 + Math.floor((Math.random() * 8000) + 1);\n        for (let i = 0; i < this.state.entries.length; i++) {\n            const item = this.state.entries[i];\n            if (item.show) {\n                item.id = base + i;\n                const itemsRef = firebase.database().ref(`organizer/${googleId}/event/${eventID}/entries`);\n                itemsRef.child(item.id).set(item);\n            }\n        }\n        this.props.handler(this.props.orgViews.VIEW);\n    }\n\n    readCSV = event => {\n        const f = event.target.files[0];\n        if (f) {\n            const r = new FileReader();\n            let a;\n            r.onload = (e) => {\n                const contents = r.result;\n                a = r.result;\n                const lines = contents.split(/[\\r\\n]+/g);\n                const tempEnt = [];\n                let line;\n                let lineTitle;\n                let linePres;\n                let lineDate;\n                let lineURL;\n                for (let i = 1; i < lines.length; i++) {\n                    line = lines[i].split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n                    if (line.length !== 3 && line.length !== 0 && line.length !== 4) {\n                        a = 'File format is incorrect. Please see \"Import Requirements\" for correct formatting.';\n                        this.setState({ entries: this.state.entries, alert: a });\n                        return;\n                    }\n                    lineTitle = line[0];\n                    linePres = line[1];\n                    lineDate = line[2];\n                    lineURL = line[3] ? line[3] : '';\n                    if (lineTitle && linePres && lineDate) {\n                        tempEnt.push({\n                            show: true,\n                            title: lineTitle,\n                            id: '',\n                            presenters: linePres,\n                            entry_dates: lineDate,\n                            info_url: lineURL,\n                        });\n                    } else {\n                        a = 'Some required data is missing. Please see \"Import Requirements\" for correct formatting.';\n                        this.setState({ entries: this.state.entries, alert: a });\n                        return;\n                    }\n                }\n                // concat entries here\n                a = `Success! Entries from ${f.name} were imported.`;\n                this.setState({\n                    entries: this.state.entries.concat(tempEnt),\n                    alert: a\n                });\n            };\n            r.readAsText(f);\n        } else {\n            this.setState({ alert: 'Unable to read file.' });\n        }\n    }\n\n    render() {\n        const { entries } = this.state;\n        return (\n            <div className=\"addEntryForm\">\n                <EntryImportInfo ref={this.infoPopup} />\n                <Typography variant=\"h4\" align=\"center\" gutterBottom>Add Entries</Typography>\n                <Button variant=\"contained\" component=\"label\" className=\"buttons\" name=\"import_entries\">\n                    Import Entries\n                    <input type=\"file\" accept=\".csv\" style={{ display: 'none' }} onChange={e => this.readCSV(e)} />\n                </Button>\n                <br /><br />\n                <Typography variant=\"subtitle1\" align=\"center\">{this.state.alert}</Typography>\n                <Button variant=\"text\" className=\"buttons\" onClick={this.openInfo}>Click here for import requirements.</Button>\n                <Divider variant=\"middle\" />\n                <form className=\"entryForm\" onSubmit={() => this.submitEntries()}>\n                    {\n                        entries.map((val, idx) => {\n                            return (\n                                <div key={val.id}>\n                                    <NewEntryForm\n                                        currValue={val}\n                                        updateEntry={(status, index) => this.updateEntry(status, index)}\n                                        index={idx}\n                                    />\n                                </div>\n                            );\n                        })\n                    }\n                    <AddCircleIcon color=\"primary\" id=\"entryIcon\" onClick={this.addEntry} />\n                    <br />\n                    <Button\n                        variant=\"contained\"\n                        className=\"buttons\"\n                        type=\"button\"\n                        onClick={this.cancelAddition}\n                    >\n                        Cancel\n                    </Button>\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"buttons\">Done</Button>\n                </form>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}