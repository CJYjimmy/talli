{"ast":null,"code":"import _classCallCheck from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/src/components/OrganizerView/AddEntryOrg.js\";\nimport React from 'react';\nimport { Typography, Button, Divider } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport NewEntryForm from './NewEntryForm';\nimport EntryImportInfo from './EntryImportInfo';\nimport '../component_style/Organizer.css';\nimport firebase from '../../firebase.js';\n/**\r\n * OrganizerView > AddEntryOrg\r\n * Allows organizers to add entries to their event\r\n * after setting up the event details (NewEventForm).\r\n * TODO: read existing events from database and render\r\n */\n\nvar AddEntryOrg =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddEntryOrg, _React$Component);\n\n  function AddEntryOrg(props) {\n    var _this;\n\n    _classCallCheck(this, AddEntryOrg);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddEntryOrg).call(this, props));\n\n    _this.openInfo = function () {\n      _this.infoPopup.current.handleOpen();\n    };\n\n    _this.addEntry = function () {\n      var newEntries = _this.state.entries.slice();\n\n      newEntries.push({\n        show: true,\n        title: '',\n        id: '',\n        presenters: '',\n        entry_dates: ''\n      });\n\n      _this.setState({\n        entries: newEntries\n      });\n    };\n\n    _this.cancelAddition = function () {\n      _this.props.handler(_this.props.orgViews.MAIN);\n    };\n\n    _this.state = {\n      entries: []\n    };\n    _this.infoPopup = React.createRef();\n    return _this;\n  }\n\n  _createClass(AddEntryOrg, [{\n    key: \"updateEntry\",\n    value: function updateEntry(status, idx) {\n      var updateEntries = this.state.entries;\n      updateEntries[idx] = status;\n      this.setState({\n        entries: updateEntries\n      });\n    }\n  }, {\n    key: \"submitEntries\",\n    value: function submitEntries() {\n      // DATABASE:\n      // add the entries with shown = true in this.state.entries\n      // to the current event\n      var eventID = this.props.curEvent;\n\n      for (var i = 0; i < this.state.entries.length; i++) {\n        var item = this.state.entries[i];\n\n        if (item.show) {\n          if (!item.id) {\n            item.id = Math.floor(Math.random() * 10000 + 1);\n          }\n\n          var itemsRef = firebase.database().ref('event/' + eventID + '/entries/' + item.id);\n          itemsRef.push(item);\n        }\n      }\n\n      this.props.handler(this.props.orgViews.MAIN);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var entries = this.state.entries;\n      return React.createElement(\"div\", {\n        className: \"addEntryForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(EntryImportInfo, {\n        ref: this.infoPopup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"h4\",\n        align: \"center\",\n        gutterBottom: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Add Entries\"), React.createElement(Button, {\n        variant: \"contained\",\n        className: \"buttons\",\n        name: \"import_entries\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Import Entries\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"text\",\n        className: \"buttons\",\n        onClick: this.openInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Click here for import requirements.\"), React.createElement(Divider, {\n        variant: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        className: \"entryForm\",\n        onSubmit: function onSubmit() {\n          return _this2.submitEntries();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, entries.map(function (val, idx) {\n        return React.createElement(\"div\", {\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, React.createElement(NewEntryForm, {\n          updateEntry: function updateEntry(status, index) {\n            return _this2.updateEntry(status, index);\n          },\n          index: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }));\n      }), React.createElement(AddCircleIcon, {\n        color: \"primary\",\n        id: \"entryIcon\",\n        onClick: this.addEntry,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        className: \"buttons\",\n        type: \"button\",\n        onClick: this.cancelAddition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Done\")));\n    }\n  }]);\n\n  return AddEntryOrg;\n}(React.Component);\n\nexport { AddEntryOrg as default };","map":{"version":3,"sources":["/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/src/components/OrganizerView/AddEntryOrg.js"],"names":["React","Typography","Button","Divider","AddCircleIcon","NewEntryForm","EntryImportInfo","firebase","AddEntryOrg","props","openInfo","infoPopup","current","handleOpen","addEntry","newEntries","state","entries","slice","push","show","title","id","presenters","entry_dates","setState","cancelAddition","handler","orgViews","MAIN","createRef","status","idx","updateEntries","eventID","curEvent","i","length","item","Math","floor","random","itemsRef","database","ref","submitEntries","map","val","index","updateEntry","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Typography, Button, Divider } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport NewEntryForm from './NewEntryForm';\r\nimport EntryImportInfo from './EntryImportInfo';\r\nimport '../component_style/Organizer.css';\r\nimport firebase from '../../firebase.js'\r\n\r\n/**\r\n * OrganizerView > AddEntryOrg\r\n * Allows organizers to add entries to their event\r\n * after setting up the event details (NewEventForm).\r\n * TODO: read existing events from database and render\r\n */\r\nexport default class AddEntryOrg extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            entries: [],\r\n        };\r\n\r\n        this.infoPopup = React.createRef();\r\n    }\r\n\r\n    openInfo = () => {\r\n        this.infoPopup.current.handleOpen();\r\n    }\r\n\r\n    addEntry = () => {\r\n        const newEntries = this.state.entries.slice();\r\n        newEntries.push({\r\n            show: true,\r\n            title: '',\r\n            id: '',\r\n            presenters: '',\r\n            entry_dates: ''\r\n        });\r\n        this.setState({ entries: newEntries });\r\n    }\r\n\r\n    updateEntry(status, idx) {\r\n        let updateEntries = this.state.entries;\r\n        updateEntries[idx] = status;\r\n        this.setState({ entries: updateEntries });\r\n    }\r\n\r\n    cancelAddition = () => {\r\n        this.props.handler(this.props.orgViews.MAIN);\r\n    }\r\n\r\n    submitEntries() {\r\n        // DATABASE:\r\n        // add the entries with shown = true in this.state.entries\r\n        // to the current event\r\n        let eventID = this.props.curEvent;\r\n        for (var i = 0; i < this.state.entries.length; i++) {\r\n            let item = this.state.entries[i];\r\n            if (item.show) {\r\n                if (!item.id) {\r\n                    item.id = Math.floor((Math.random() * 10000) + 1);\r\n                }\r\n                const itemsRef = firebase.database().ref('event/' + eventID + '/entries/' + item.id);\r\n                itemsRef.push(item);\r\n            }\r\n        }\r\n        this.props.handler(this.props.orgViews.MAIN);\r\n    }\r\n\r\n    render() {\r\n        let { entries } = this.state;\r\n        return (\r\n            <div className='addEntryForm'>\r\n                <EntryImportInfo ref={this.infoPopup} />\r\n                <Typography variant='h4' align='center' gutterBottom>Add Entries</Typography>\r\n                <Button variant=\"contained\" className='buttons' name='import_entries'>Import Entries</Button>\r\n                <br />\r\n                <Button variant=\"text\" className='buttons' onClick={this.openInfo} >Click here for import requirements.</Button>\r\n                <Divider variant=\"middle\" />\r\n                <form className=\"entryForm\" onSubmit={() => this.submitEntries()}>\r\n                    {\r\n                        entries.map((val, idx) => {\r\n                            return (\r\n                                <div key={idx}>\r\n                                    <NewEntryForm updateEntry={(status, index) => this.updateEntry(status, index)} index={idx} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    <AddCircleIcon color='primary' id='entryIcon' onClick={this.addEntry} />\r\n                    <br />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className=\"buttons\"\r\n                        type=\"button\"\r\n                        onClick={this.cancelAddition}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button type=\"submit\" variant=\"contained\" className='buttons'>Done</Button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}