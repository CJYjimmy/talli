{"ast":null,"code":"import _classCallCheck from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/src/components/VoterView/AddEntryVote.js\";\nimport React from 'react';\nimport { Typography, TextField, Button } from '@material-ui/core';\nimport QrReader from 'react-qr-reader';\nimport EntryConfirmation from './EntryConfirmation';\nimport '../component_style/Voter.css';\n/**\r\n * Entry Add, unimplemented\r\n */\n\nvar AddEntryVote =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddEntryVote, _React$Component);\n\n  function AddEntryVote(props) {\n    var _this;\n\n    _classCallCheck(this, AddEntryVote);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddEntryVote).call(this, props));\n    /** ::STATE INFO::\r\n     *  entryID:        Entry's UID, obtained either from QRcode or textfield\r\n     *  idFieldValue:   The value currently in the textbox\r\n     */\n\n    _this.requestConfirm = function () {\n      _this.confirmChild.current.handleOpen();\n    };\n\n    _this.state = {\n      entryID: '',\n      idFieldValue: ''\n    };\n    _this.handleScan = _this.handleScan.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleError = _this.handleError.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleText = _this.handleText.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddEntry = _this.handleAddEntry.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.keyPress = _this.keyPress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.confirmChild = React.createRef();\n    return _this;\n  } //TODO: server request to return Entry name for given state.entryID\n\n\n  _createClass(AddEntryVote, [{\n    key: \"getNameFromID\",\n    value: function getNameFromID() {\n      return this.state.entryID;\n    }\n  }, {\n    key: \"handleScan\",\n    value: function handleScan(data) {\n      if (data && data.length > 4) {\n        this.setState({\n          entryID: data\n        });\n        this.requestConfirm();\n      }\n    }\n  }, {\n    key: \"handleText\",\n    value: function handleText() {\n      if (this.state.idFieldValue.length > 5) {\n        this.setState({\n          entryID: this.state.idFieldValue\n        });\n        this.requestConfirm();\n      }\n    }\n  }, {\n    key: \"handleAddEntry\",\n    value: function handleAddEntry() {\n      //TODO: Add the Entry and return to ranking\n      this.props.handler(this.props.voteViews.RANK);\n    }\n  }, {\n    key: \"handleError\",\n    value: function handleError(err) {}\n  }, {\n    key: \"keyPress\",\n    value: function keyPress(e) {\n      if (e.key === 'Enter') {\n        this.handleText();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(EntryConfirmation, {\n        entryName: this.getNameFromID(),\n        ref: this.confirmChild,\n        handler: this.handleAddEntry,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(QrReader, {\n        delay: 300,\n        onScan: this.handleScan,\n        onError: this.handleError,\n        style: {\n          width: '80%',\n          margin: '20px auto 0px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"h5\",\n        align: \"center\",\n        className: \"QRText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Scan QR Code or enter Entry ID:\"), React.createElement(\"div\", {\n        className: \"textField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-dense\",\n        label: \"Entry ID\",\n        margin: \"dense\",\n        variant: \"outlined\",\n        value: this.state.idFieldValue,\n        onKeyPress: this.keyPress,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idFieldValue: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"submitButtonContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"default\",\n        className: \"homeButton\",\n        onClick: this.handleText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Add\")));\n    }\n  }]);\n\n  return AddEntryVote;\n}(React.Component);\n\nexport { AddEntryVote as default };","map":{"version":3,"sources":["/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/src/components/VoterView/AddEntryVote.js"],"names":["React","Typography","TextField","Button","QrReader","EntryConfirmation","AddEntryVote","props","requestConfirm","confirmChild","current","handleOpen","state","entryID","idFieldValue","handleScan","bind","handleError","handleText","handleAddEntry","keyPress","createRef","data","length","setState","handler","voteViews","RANK","err","e","key","getNameFromID","width","margin","target","value","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Typography, TextField, Button } from '@material-ui/core';\r\nimport QrReader from 'react-qr-reader';\r\nimport EntryConfirmation from './EntryConfirmation';\r\nimport '../component_style/Voter.css';\r\n\r\n/**\r\n * Entry Add, unimplemented\r\n */\r\nexport default class AddEntryVote extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        /** ::STATE INFO::\r\n         *  entryID:        Entry's UID, obtained either from QRcode or textfield\r\n         *  idFieldValue:   The value currently in the textbox\r\n         */\r\n        this.state = { entryID: '', idFieldValue: '' };\r\n        this.handleScan = this.handleScan.bind(this);\r\n        this.handleError = this.handleError.bind(this);\r\n        this.handleText = this.handleText.bind(this);\r\n        this.handleAddEntry = this.handleAddEntry.bind(this);\r\n        this.keyPress = this.keyPress.bind(this);\r\n\r\n        this.confirmChild = React.createRef();\r\n    }\r\n\r\n    //TODO: server request to return Entry name for given state.entryID\r\n    getNameFromID() {\r\n        return(this.state.entryID);\r\n    }\r\n\r\n    requestConfirm = () => {\r\n        this.confirmChild.current.handleOpen();\r\n    }\r\n\r\n    handleScan(data) {\r\n        if (data && data.length > 4) {\r\n            this.setState({ entryID: data });\r\n            this.requestConfirm();\r\n        }\r\n    }\r\n\r\n    handleText() {\r\n        if (this.state.idFieldValue.length > 5) {\r\n            this.setState({ entryID: this.state.idFieldValue });\r\n            this.requestConfirm();\r\n        }\r\n    }\r\n\r\n    handleAddEntry() {\r\n        //TODO: Add the Entry and return to ranking\r\n        this.props.handler(this.props.voteViews.RANK);\r\n    }\r\n\r\n    handleError(err) {}\r\n\r\n    keyPress(e) {\r\n        if(e.key === 'Enter') {\r\n            this.handleText();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <EntryConfirmation entryName={this.getNameFromID()} ref={this.confirmChild} handler={this.handleAddEntry}/>\r\n                <QrReader delay={300} onScan={this.handleScan} onError={this.handleError} style={{ width: '80%', margin: '20px auto 0px'}} />\r\n                <Typography variant='h5' align='center' className=\"QRText\">Scan QR Code or enter Entry ID:</Typography>\r\n                <div className=\"textField\">\r\n                    <TextField \r\n                        id=\"outlined-dense\" \r\n                        label=\"Entry ID\" \r\n                        margin=\"dense\" \r\n                        variant=\"outlined\" \r\n                        value={this.state.idFieldValue} \r\n                        onKeyPress={this.keyPress}\r\n                        onChange={e => this.setState({ idFieldValue: e.target.value })}\r\n                    />\r\n                </div>\r\n                <div className=\"submitButtonContainer\">\r\n                    <Button variant=\"contained\" color=\"default\" className=\"homeButton\" onClick={this.handleText}>\r\n                        Add\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}