{"ast":null,"code":"var _jsxFileName = \"/Users/chenjiayuan/CS3312/talli/talli-app/client/src/routing/routing.js\";\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport MainPage from '../components/MainPage';\nimport Voter from '../components/Voter';\nimport Organizer from '../components/Organizer';\nimport CookieInfo from '../components/CookieInfo';\n\nvar RouterMixin = require('react-mini-router').RouterMixin;\n/**\r\n * RoutedApp handles routing between each of the main views as well\r\n * as error handling when a non-existant page is queried\r\n */\n\n\nvar RoutedApp = createReactClass({\n  displayName: \"RoutedApp\",\n  getInitialState: function getInitialState() {\n    return {\n      loggedIn: this.props.loggedIn\n    };\n  },\n  mixins: [RouterMixin],\n  // TODO: Set up /vote/:text (voteWithID) to handle url-injected event IDs\n  //      (currently displays the same as /vote)\n  routes: {\n    '/': 'home',\n    '/vote': 'vote',\n    '/vote/:text': 'voteWithID',\n    '/vote/:event/:entry': 'joinWithEntry',\n    '/organizer': 'organizer',\n    '/cookies': 'cookies'\n  },\n  render: function render() {\n    return this.renderCurrentRoute();\n  },\n  home: function home() {\n    return React.createElement(MainPage, {\n      loggedIn: this.props.loggedIn,\n      onSuccess: this.onSuccess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  },\n  vote: function vote() {\n    return React.createElement(Voter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  },\n  voteWithID: function voteWithID(text) {\n    return React.createElement(Voter, {\n      scanID: text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  },\n  joinWithEntry: function joinWithEntry(event, entry) {\n    return React.createElement(Voter, {\n      scanID: event,\n      scanEntry: entry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n  },\n  organizer: function organizer() {\n    return React.createElement(Organizer, {\n      logout: this.logout,\n      user: this.props.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  },\n  cookies: function cookies() {\n    return React.createElement(CookieInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n  },\n  notFound: function notFound(path) {\n    return React.createElement(\"div\", {\n      className: \"not-found\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Page Not Found: \", path);\n  },\n  onSuccess: function onSuccess(response) {\n    this.props.onSuccess(response);\n  },\n  logout: function logout() {\n    this.props.logout();\n  }\n});\nexport default RoutedApp;","map":{"version":3,"sources":["/Users/chenjiayuan/CS3312/talli/talli-app/client/src/routing/routing.js"],"names":["React","createReactClass","MainPage","Voter","Organizer","CookieInfo","RouterMixin","require","RoutedApp","getInitialState","loggedIn","props","mixins","routes","render","renderCurrentRoute","home","onSuccess","vote","voteWithID","text","joinWithEntry","event","entry","organizer","logout","user","cookies","notFound","path","response"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,IAAMC,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAAP,CAA6BD,WAAjD;AAEA;;;;;;AAIA,IAAME,SAAS,GAAGP,gBAAgB,CAAC;AAAA;AAE/BQ,EAAAA,eAF+B,6BAEb;AACd,WAAO;AAAEC,MAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWD;AAAvB,KAAP;AACH,GAJ8B;AAM/BE,EAAAA,MAAM,EAAE,CAACN,WAAD,CANuB;AAQ/B;AACA;AACAO,EAAAA,MAAM,EAAE;AACJ,SAAK,MADD;AAEJ,aAAS,MAFL;AAGJ,mBAAe,YAHX;AAIJ,2BAAuB,eAJnB;AAKJ,kBAAc,WALV;AAMJ,gBAAY;AANR,GAVuB;AAmB/BC,EAAAA,MAnB+B,oBAmBtB;AACL,WAAO,KAAKC,kBAAL,EAAP;AACH,GArB8B;AAuB/BC,EAAAA,IAvB+B,kBAuBxB;AACH,WACI,oBAAC,QAAD;AACI,MAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWD,QADzB;AAEI,MAAA,SAAS,EAAE,KAAKO,SAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH,GA9B8B;AAgC/BC,EAAAA,IAhC+B,kBAgCxB;AACH,WAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAlC8B;AAoC/BC,EAAAA,UApC+B,sBAoCpBC,IApCoB,EAoCd;AACb,WAAO,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAEA,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAtC8B;AAwC/BC,EAAAA,aAxC+B,yBAwCjBC,KAxCiB,EAwCVC,KAxCU,EAwCH;AACxB,WAAO,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAED,KAAf;AAAsB,MAAA,SAAS,EAAEC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GA1C8B;AA4C/BC,EAAAA,SA5C+B,uBA4CnB;AACR,WACI,oBAAC,SAAD;AACI,MAAA,MAAM,EAAE,KAAKC,MADjB;AAEI,MAAA,IAAI,EAAE,KAAKd,KAAL,CAAWe,IAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH,GAnD8B;AAqD/BC,EAAAA,OArD+B,qBAqDrB;AACN,WAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAvD8B;AAyD/BC,EAAAA,QAzD+B,oBAyDtBC,IAzDsB,EAyDhB;AACX,WAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA4CA,IAA5C,CAAP;AACH,GA3D8B;AA6D/BZ,EAAAA,SA7D+B,qBA6DrBa,QA7DqB,EA6DX;AAChB,SAAKnB,KAAL,CAAWM,SAAX,CAAqBa,QAArB;AACH,GA/D8B;AAiE/BL,EAAAA,MAjE+B,oBAiEtB;AACL,SAAKd,KAAL,CAAWc,MAAX;AACH;AAnE8B,CAAD,CAAlC;AAsEA,eAAejB,SAAf","sourcesContent":["import React from 'react';\r\nimport createReactClass from 'create-react-class';\r\nimport MainPage from '../components/MainPage';\r\nimport Voter from '../components/Voter';\r\nimport Organizer from '../components/Organizer';\r\nimport CookieInfo from '../components/CookieInfo';\r\n\r\nconst RouterMixin = require('react-mini-router').RouterMixin;\r\n\r\n/**\r\n * RoutedApp handles routing between each of the main views as well\r\n * as error handling when a non-existant page is queried\r\n */\r\nconst RoutedApp = createReactClass({\r\n\r\n    getInitialState() {\r\n        return { loggedIn: this.props.loggedIn };\r\n    },\r\n\r\n    mixins: [RouterMixin],\r\n\r\n    // TODO: Set up /vote/:text (voteWithID) to handle url-injected event IDs\r\n    //      (currently displays the same as /vote)\r\n    routes: {\r\n        '/': 'home',\r\n        '/vote': 'vote',\r\n        '/vote/:text': 'voteWithID',\r\n        '/vote/:event/:entry': 'joinWithEntry',\r\n        '/organizer': 'organizer',\r\n        '/cookies': 'cookies'\r\n    },\r\n\r\n    render() {\r\n        return this.renderCurrentRoute();\r\n    },\r\n\r\n    home() {\r\n        return (\r\n            <MainPage\r\n                loggedIn={this.props.loggedIn}\r\n                onSuccess={this.onSuccess}\r\n            />\r\n        );\r\n    },\r\n\r\n    vote() {\r\n        return <Voter />;\r\n    },\r\n\r\n    voteWithID(text) {\r\n        return <Voter scanID={text} />;\r\n    },\r\n\r\n    joinWithEntry(event, entry) {\r\n        return <Voter scanID={event} scanEntry={entry} />;\r\n    },\r\n\r\n    organizer() {\r\n        return (\r\n            <Organizer\r\n                logout={this.logout}\r\n                user={this.props.user}\r\n            />\r\n        );\r\n    },\r\n\r\n    cookies() {\r\n        return <CookieInfo />;\r\n    },\r\n\r\n    notFound(path) {\r\n        return <div className=\"not-found\">Page Not Found: {path}</div>;\r\n    },\r\n\r\n    onSuccess(response) {\r\n        this.props.onSuccess(response);\r\n    },\r\n\r\n    logout() {\r\n        this.props.logout();\r\n    }\r\n});\r\n\r\nexport default RoutedApp;\r\n"]},"metadata":{},"sourceType":"module"}