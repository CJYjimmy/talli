{"ast":null,"code":"import _classCallCheck from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/src/components/VoterView/AddEntryVote.js\";\nimport React from 'react';\nimport { Typography, TextField, Button } from '@material-ui/core';\nimport QrReader from 'react-qr-reader';\nimport EntryConfirmation from './EntryConfirmation';\nimport firebase from '../../firebase';\nimport '../component_style/Voter.css';\n\nvar config = require('../../config.json');\n/**\r\n * Entry Add\r\n */\n\n\nvar AddEntryVote =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddEntryVote, _React$Component);\n\n  function AddEntryVote(props) {\n    var _this;\n\n    _classCallCheck(this, AddEntryVote);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddEntryVote).call(this, props));\n    /** ::STATE INFO::\r\n     *  entryID:        Entry's UID, obtained either from QRcode or textfield\r\n     *  idFieldValue:   The value currently in the textbox\r\n     */\n\n    _this.requestConfirm = function () {\n      var query = firebase.database().ref('organizer/');\n      query.on('value', function (snapshot) {\n        var organizer = snapshot.val();\n        var event = organizer[_this.props.organizer]['event'][_this.props.eventID];\n        var entry = event['entries'][_this.state.idFieldValue];\n\n        if (!entry) {\n          // TODO: Entry not found\n          _this.setState({\n            entryID: 'ERROR',\n            entryTitle: 'ERROR'\n          });\n\n          return;\n        }\n\n        _this.setState({\n          entryTitle: entry['title']\n        });\n      });\n\n      _this.confirmChild.current.handleOpen();\n    };\n\n    _this.state = {\n      entryID: '',\n      idFieldValue: '',\n      entryTitle: ''\n    };\n    _this.handleScan = _this.handleScan.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleError = _this.handleError.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleText = _this.handleText.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddEntry = _this.handleAddEntry.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.keyPress = _this.keyPress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.confirmChild = React.createRef();\n    return _this;\n  }\n\n  _createClass(AddEntryVote, [{\n    key: \"handleScan\",\n    value: function handleScan(data) {\n      if (data && data.toLowerCase().includes(config.Global.entryQRPrefix)) {\n        var id = data.substring(data.indexOf(config.Global.entryQRPrefix) + 7).replace(/\\W/g, '');\n        this.setState({\n          entryID: id\n        });\n        this.requestConfirm();\n      }\n    }\n  }, {\n    key: \"handleText\",\n    value: function handleText() {\n      if (this.state.idFieldValue.length > 2) {\n        this.setState({\n          entryID: this.state.idFieldValue\n        });\n        this.requestConfirm();\n      }\n    }\n  }, {\n    key: \"handleAddEntry\",\n    value: function handleAddEntry() {\n      this.props.handler(this.props.voteViews.RANK, 'na', 'na', this.state.entryID);\n    }\n  }, {\n    key: \"handleError\",\n    value: function handleError(err) {}\n  }, {\n    key: \"keyPress\",\n    value: function keyPress(e) {\n      if (e.key === 'Enter') {\n        this.handleText();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(EntryConfirmation, {\n        entryName: this.state.entryTitle,\n        ref: this.confirmChild,\n        handler: this.handleAddEntry,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(QrReader, {\n        delay: 300,\n        onScan: this.handleScan,\n        onError: this.handleError,\n        style: {\n          width: '80%',\n          margin: '20px auto 0px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"h5\",\n        align: \"center\",\n        className: \"QRText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Scan QR Code or enter Entry ID:\"), React.createElement(\"div\", {\n        className: \"textField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-dense\",\n        label: \"Entry ID\",\n        margin: \"dense\",\n        variant: \"outlined\",\n        value: this.state.idFieldValue,\n        onKeyPress: this.keyPress,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idFieldValue: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"submitButtonContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"default\",\n        className: \"homeButton\",\n        onClick: this.handleText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Add\")));\n    }\n  }]);\n\n  return AddEntryVote;\n}(React.Component);\n\nexport { AddEntryVote as default };","map":{"version":3,"sources":["/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/src/components/VoterView/AddEntryVote.js"],"names":["React","Typography","TextField","Button","QrReader","EntryConfirmation","firebase","config","require","AddEntryVote","props","requestConfirm","query","database","ref","on","snapshot","organizer","val","event","eventID","entry","state","idFieldValue","setState","entryID","entryTitle","confirmChild","current","handleOpen","handleScan","bind","handleError","handleText","handleAddEntry","keyPress","createRef","data","toLowerCase","includes","Global","entryQRPrefix","id","substring","indexOf","replace","length","handler","voteViews","RANK","err","e","key","width","margin","target","value","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Typography, TextField, Button } from '@material-ui/core';\r\nimport QrReader from 'react-qr-reader';\r\nimport EntryConfirmation from './EntryConfirmation';\r\nimport firebase from '../../firebase';\r\nimport '../component_style/Voter.css';\r\nvar config = require('../../config.json');\r\n\r\n/**\r\n * Entry Add\r\n */\r\nexport default class AddEntryVote extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        /** ::STATE INFO::\r\n         *  entryID:        Entry's UID, obtained either from QRcode or textfield\r\n         *  idFieldValue:   The value currently in the textbox\r\n         */\r\n        this.state = { entryID: '', idFieldValue: '', entryTitle: '' };\r\n        this.handleScan = this.handleScan.bind(this);\r\n        this.handleError = this.handleError.bind(this);\r\n        this.handleText = this.handleText.bind(this);\r\n        this.handleAddEntry = this.handleAddEntry.bind(this);\r\n        this.keyPress = this.keyPress.bind(this);\r\n\r\n        this.confirmChild = React.createRef();\r\n    }\r\n\r\n    requestConfirm = () => {\r\n        var query = firebase.database().ref('organizer/');\r\n        query.on('value', (snapshot) => {\r\n            let organizer = snapshot.val();\r\n            let event = organizer[this.props.organizer]['event'][this.props.eventID];\r\n            let entry = event['entries'][this.state.idFieldValue];\r\n            if (!entry) {\r\n                // TODO: Entry not found\r\n                this.setState({ entryID: 'ERROR', entryTitle: 'ERROR' });\r\n                return;\r\n            }\r\n            this.setState({ entryTitle: entry['title'] })\r\n        });\r\n        this.confirmChild.current.handleOpen();\r\n    }\r\n\r\n    handleScan(data) {\r\n        if (data && data.toLowerCase().includes(config.Global.entryQRPrefix)) {\r\n            var id = data.substring(data.indexOf(config.Global.entryQRPrefix) + 7).replace(/\\W/g,'');\r\n            this.setState({ entryID: id });\r\n            this.requestConfirm();\r\n        }\r\n    }\r\n\r\n    handleText() {\r\n        if (this.state.idFieldValue.length > 2) {\r\n            this.setState({ entryID: this.state.idFieldValue });\r\n            this.requestConfirm();\r\n        }\r\n    }\r\n\r\n    handleAddEntry() {\r\n        this.props.handler(this.props.voteViews.RANK, 'na', 'na', this.state.entryID);\r\n    }\r\n\r\n    handleError(err) {}\r\n\r\n    keyPress(e) {\r\n        if(e.key === 'Enter') {\r\n            this.handleText();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <EntryConfirmation entryName={this.state.entryTitle} ref={this.confirmChild} handler={this.handleAddEntry}/>\r\n                <QrReader delay={300} onScan={this.handleScan} onError={this.handleError} style={{ width: '80%', margin: '20px auto 0px'}} />\r\n                <Typography variant='h5' align='center' className=\"QRText\">Scan QR Code or enter Entry ID:</Typography>\r\n                <div className=\"textField\">\r\n                    <TextField \r\n                        id=\"outlined-dense\" \r\n                        label=\"Entry ID\" \r\n                        margin=\"dense\" \r\n                        variant=\"outlined\" \r\n                        value={this.state.idFieldValue} \r\n                        onKeyPress={this.keyPress}\r\n                        onChange={e => this.setState({ idFieldValue: e.target.value })}\r\n                    />\r\n                </div>\r\n                <div className=\"submitButtonContainer\">\r\n                    <Button variant=\"contained\" color=\"default\" className=\"homeButton\" onClick={this.handleText}>\r\n                        Add\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}