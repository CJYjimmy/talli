{"ast":null,"code":"import _classCallCheck from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chenjiayuan/junior_design/talli/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chenjiayuan/junior_design/talli/client/src/components/OrganizerView/EventList.js\";\nimport React, { Component } from 'react';\nimport { Typography, Grid, Button } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport { navigate } from 'react-mini-router';\nimport '../component_style/Organizer.css';\nimport firebase from '../../firebase';\n/**\n * OrganizerView > EventList\n * Organizer landing page which shows them all\n * of their events and the option to add a new one.\n */\n\nvar EventList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventList, _Component);\n\n  function EventList(props) {\n    var _this;\n\n    _classCallCheck(this, EventList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventList).call(this, props));\n    _this.state = {\n      events: []\n    };\n    return _this;\n  }\n\n  _createClass(EventList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var googleId = sessionStorage.getItem('id');\n\n      if (googleId) {\n        var query = firebase.database().ref(\"organizer/\".concat(googleId, \"/event\"));\n        var allEvents = [];\n        query.on('value', function (snapshot) {\n          var events = snapshot.val();\n\n          for (var event in events) {\n            var refPrefix = \"\".concat(event, \"/eventData\");\n            var id = snapshot.child(\"\".concat(refPrefix, \"/id\")).val();\n            var name = snapshot.child(\"\".concat(refPrefix, \"/name\")).val();\n            var location = snapshot.child(\"\".concat(refPrefix, \"/location\")).val();\n            var startDate = snapshot.child(\"\".concat(refPrefix, \"/startDate\")).val();\n            var endDate = snapshot.child(\"\".concat(refPrefix, \"/endDate\")).val();\n            var automate = snapshot.child(\"\".concat(refPrefix, \"/automate\")).val();\n            var startVote = snapshot.child(\"\".concat(refPrefix, \"/startVote\")).val();\n            var endVote = snapshot.child(\"\".concat(refPrefix, \"/endVote\")).val();\n            allEvents.push({\n              id: id,\n              name: name,\n              location: location,\n              startDate: startDate,\n              endDate: endDate,\n              automate: automate,\n              startVote: startVote,\n              endVote: endVote\n            });\n          }\n\n          _this2.setState({\n            events: allEvents\n          });\n        });\n      }\n    }\n  }, {\n    key: \"parseDate\",\n    value: function parseDate(isoDate) {\n      var dateString = \"\".concat(isoDate.substring(5, 7), \"/\").concat(isoDate.substring(8, 10), \"/\").concat(isoDate.substring(0, 4));\n      return dateString;\n    }\n  }, {\n    key: \"AddEvent\",\n    value: function AddEvent() {\n      this.props.handler(this.props.orgViews.CREATE);\n    }\n  }, {\n    key: \"viewEvent\",\n    value: function viewEvent(id) {\n      this.props.setEvent(id);\n      this.props.handler(this.props.orgViews.VIEW);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var organizerId = sessionStorage.getItem('id');\n\n      if (!organizerId) {\n        navigate('/');\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h4\",\n        align: \"center\",\n        gutterBottom: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, sessionStorage.getItem('name'), \"'s Events\"), React.createElement(Grid, {\n        container: true,\n        className: \"organizerEvents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        className: \"eventContainer\",\n        id: \"addEvent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(AddCircleIcon, {\n        color: \"primary\",\n        id: \"addCircleIcon\",\n        onClick: function onClick() {\n          return _this3.AddEvent();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), this.state.events.map(function (event, index) {\n        return React.createElement(Button, {\n          className: \"eventContainer\",\n          variant: \"contained\",\n          color: \"primary\",\n          id: \"openEvent\",\n          onClick: function onClick() {\n            return _this3.viewEvent(event.id);\n          },\n          key: event.id,\n          index: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, event.name, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }), _this3.parseDate(event.startDate), \" - \", _this3.parseDate(event.endDate), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }), \"Voting period is \", event.automate ? \"automated.\" : \"not automated.\");\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EventList;\n}(Component);\n\nexport { EventList as default };","map":{"version":3,"sources":["/Users/chenjiayuan/junior_design/talli/client/src/components/OrganizerView/EventList.js"],"names":["React","Component","Typography","Grid","Button","AddCircleIcon","navigate","firebase","EventList","props","state","events","googleId","sessionStorage","getItem","query","database","ref","allEvents","on","snapshot","val","event","refPrefix","id","child","name","location","startDate","endDate","automate","startVote","endVote","push","setState","isoDate","dateString","substring","handler","orgViews","CREATE","setEvent","VIEW","organizerId","AddEvent","map","index","viewEvent","parseDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Typography, Grid, Button } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport { navigate } from 'react-mini-router';\nimport '../component_style/Organizer.css';\nimport firebase from '../../firebase';\n\n/**\n * OrganizerView > EventList\n * Organizer landing page which shows them all\n * of their events and the option to add a new one.\n */\nexport default class EventList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: []\n        };\n    }\n\n    componentDidMount() {\n        const googleId = sessionStorage.getItem('id');\n        if (googleId) {\n            const query = firebase.database().ref(`organizer/${googleId}/event`);\n            const allEvents = [];\n            query.on('value', (snapshot) => {\n                const events = snapshot.val();\n                for (let event in events) {\n                    const refPrefix = `${event}/eventData`;\n                    const id = snapshot.child(`${refPrefix}/id`).val();\n                    const name = snapshot.child(`${refPrefix}/name`).val();\n                    const location = snapshot.child(`${refPrefix}/location`).val();\n                    const startDate = snapshot.child(`${refPrefix}/startDate`).val();\n                    const endDate = snapshot.child(`${refPrefix}/endDate`).val();\n                    const automate = snapshot.child(`${refPrefix}/automate`).val();\n                    const startVote = snapshot.child(`${refPrefix}/startVote`).val();\n                    const endVote = snapshot.child(`${refPrefix}/endVote`).val();\n\n                    allEvents.push({\n                        id,\n                        name,\n                        location,\n                        startDate,\n                        endDate,\n                        automate,\n                        startVote,\n                        endVote\n                    });\n                }\n                this.setState({\n                    events: allEvents\n                });\n            });\n        }\n    }\n\n    parseDate(isoDate) {\n        const dateString = `${isoDate.substring(5, 7)}/${isoDate.substring(8, 10)}/${isoDate.substring(0, 4)}`;\n        return dateString;\n    }\n\n    AddEvent() {\n        this.props.handler(this.props.orgViews.CREATE);\n    }\n\n    viewEvent(id) {\n        this.props.setEvent(id);\n        this.props.handler(this.props.orgViews.VIEW);\n    }\n\n    render() {\n        const organizerId = sessionStorage.getItem('id');\n        if (!organizerId) {\n            navigate('/');\n        }\n        return (\n            <div>\n                <Typography variant=\"h4\" align=\"center\" gutterBottom>{sessionStorage.getItem('name')}&apos;s Events</Typography>\n                <Grid container className=\"organizerEvents\">\n                    <Grid item className=\"eventContainer\" id=\"addEvent\">\n                        <AddCircleIcon color=\"primary\" id=\"addCircleIcon\" onClick={() => this.AddEvent()} />\n                    </Grid>\n                    {this.state.events.map((event, index) => (\n                        <Button\n                            className=\"eventContainer\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            id=\"openEvent\"\n                            onClick={() => this.viewEvent(event.id)}\n                            key={event.id}\n                            index={index}\n                        >\n                            {event.name}\n                            <br />\n                            {this.parseDate(event.startDate)} - {this.parseDate(event.endDate)}\n                            <br />\n                            <br />\n                            Voting period is {event.automate ? \"automated.\" : \"not automated.\"}\n                        </Button>\n                    ))}\n                </Grid>\n                <div />\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}