{"ast":null,"code":"import _classCallCheck from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/src/components/VoterView/JoinEvent.js\";\nimport React from 'react';\nimport QrReader from 'react-qr-reader';\nimport { TextField, Typography, Button } from '@material-ui/core';\nimport EntryConfirmation from './EntryConfirmation';\nimport '../component_style/Voter.css';\nimport firebase from '../../firebase';\n\nvar config = require('../../config.json');\n/**\r\n * Join Event via QR Code or UID, unimplemented\r\n */\n\n\nvar JoinEvent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(JoinEvent, _React$Component);\n\n  function JoinEvent(props) {\n    var _this;\n\n    _classCallCheck(this, JoinEvent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(JoinEvent).call(this, props));\n    /** ::STATE INFO::\r\n     *  eventID:        Event's UID, obtained either from QRcode or textfield\r\n     *  idFieldValue:   The value currently in the textbox\r\n     */\n\n    _this.requestConfirm = function () {\n      firebase.database().ref('event/').once('value').then(function (snap) {\n        var orgID = snap.val()[_this.state.eventID];\n\n        _this.setState({\n          organizerID: orgID ? orgID['organizer']['id'] : ''\n        }, function () {\n          if (_this.state.organizerID !== '') {\n            firebase.database().ref('/organizer/' + _this.state.organizerID + '/event/' + _this.state.eventID).once('value').then(function (snapshot) {\n              var event = snapshot.val();\n\n              if (!event) {\n                //TODO: event not found\n                _this.setState({\n                  eventName: 'ERROR'\n                });\n\n                console.log('error');\n                return;\n              }\n\n              _this.setState({\n                eventName: event['eventData']['name']\n              });\n            });\n          } else {\n            //TODO: event not found\n            console.log('error');\n          }\n        });\n      });\n\n      _this.confirmChild.current.handleOpen();\n    };\n\n    _this.state = {\n      eventID: '',\n      idFieldValue: '',\n      eventName: '',\n      organizerID: ''\n    };\n    _this.handleScan = _this.handleScan.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleError = _this.handleError.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleText = _this.handleText.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleJoinEvent = _this.handleJoinEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.keyPress = _this.keyPress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.confirmChild = React.createRef();\n    return _this;\n  }\n\n  _createClass(JoinEvent, [{\n    key: \"handleScan\",\n    value: function handleScan(data) {\n      if (data && data.toLowerCase().includes((config.Global.hostURL + \"/vote/\").toLowerCase())) {\n        var id = data.substring(data.indexOf(\"/vote/\") + 6).replace(/\\W/g, '');\n        this.setState({\n          eventID: id\n        });\n        this.requestConfirm();\n      }\n    }\n  }, {\n    key: \"handleText\",\n    value: function handleText() {\n      if (this.state.idFieldValue.length > 2) {\n        this.setState({\n          eventID: this.state.idFieldValue\n        });\n        this.requestConfirm();\n      }\n    }\n  }, {\n    key: \"handleJoinEvent\",\n    value: function handleJoinEvent() {\n      //TODO: Join the event\n      this.props.handler(this.props.voteViews.RANK, this.state.eventID, this.state.organizerID);\n    }\n  }, {\n    key: \"handleError\",\n    value: function handleError(err) {}\n  }, {\n    key: \"keyPress\",\n    value: function keyPress(e) {\n      if (e.key === 'Enter') {\n        this.handleText();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(EntryConfirmation, {\n        entryName: this.state.eventName,\n        ref: this.confirmChild,\n        handler: this.handleJoinEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(QrReader, {\n        delay: 300,\n        onScan: this.handleScan,\n        onError: this.handleError,\n        style: {\n          width: '80%',\n          margin: '20px auto 0px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"h5\",\n        align: \"center\",\n        className: \"QRText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Scan QR Code or enter Event ID:\"), React.createElement(\"div\", {\n        className: \"textField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-dense\",\n        label: \"Event ID\",\n        margin: \"dense\",\n        variant: \"outlined\",\n        value: this.state.idFieldValue,\n        onKeyDown: this.keyPress,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idFieldValue: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"submitButtonContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"default\",\n        className: \"homeButton\",\n        onClick: this.handleText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Join\")));\n    }\n  }]);\n\n  return JoinEvent;\n}(React.Component);\n\nexport { JoinEvent as default };","map":{"version":3,"sources":["/Users/daveworthington/Documents/GaTech/Junior Design/Talli/talli/talli-app/client/src/components/VoterView/JoinEvent.js"],"names":["React","QrReader","TextField","Typography","Button","EntryConfirmation","firebase","config","require","JoinEvent","props","requestConfirm","database","ref","once","then","snap","orgID","val","state","eventID","setState","organizerID","snapshot","event","eventName","console","log","confirmChild","current","handleOpen","idFieldValue","handleScan","bind","handleError","handleText","handleJoinEvent","keyPress","createRef","data","toLowerCase","includes","Global","hostURL","id","substring","indexOf","replace","length","handler","voteViews","RANK","err","e","key","width","margin","target","value","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport QrReader from 'react-qr-reader';\r\nimport { TextField, Typography, Button } from '@material-ui/core';\r\nimport EntryConfirmation from './EntryConfirmation';\r\nimport '../component_style/Voter.css';\r\nimport firebase from '../../firebase';\r\nvar config = require('../../config.json');\r\n\r\n/**\r\n * Join Event via QR Code or UID, unimplemented\r\n */\r\nexport default class JoinEvent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        /** ::STATE INFO::\r\n         *  eventID:        Event's UID, obtained either from QRcode or textfield\r\n         *  idFieldValue:   The value currently in the textbox\r\n         */\r\n        this.state = { eventID: '', idFieldValue: '', eventName: '', organizerID: '' };\r\n        this.handleScan = this.handleScan.bind(this);\r\n        this.handleError = this.handleError.bind(this);\r\n        this.handleText = this.handleText.bind(this);\r\n        this.handleJoinEvent = this.handleJoinEvent.bind(this);\r\n        this.keyPress = this.keyPress.bind(this);\r\n\r\n        this.confirmChild = React.createRef();\r\n    }\r\n\r\n    requestConfirm = () => {\r\n        firebase.database().ref('event/').once('value').then(snap => {\r\n            let orgID = snap.val()[this.state.eventID];\r\n            this.setState({ organizerID: (orgID ? orgID['organizer']['id'] : '') }, () => {\r\n                if (this.state.organizerID !== '') {\r\n                    firebase.database().ref('/organizer/' + this.state.organizerID + '/event/' + this.state.eventID).once('value').then(snapshot => {\r\n                        let event = snapshot.val();\r\n                        if (!event) {\r\n                            //TODO: event not found\r\n                            this.setState({ eventName: 'ERROR' });\r\n                            console.log('error');\r\n                            return;\r\n                        }\r\n                        this.setState({ eventName: event['eventData']['name'] });\r\n                    });\r\n                } else {\r\n                    //TODO: event not found\r\n                    console.log('error');\r\n                }\r\n            });\r\n        });\r\n        this.confirmChild.current.handleOpen();\r\n    }\r\n\r\n    handleScan(data) {\r\n        if (data && data.toLowerCase().includes((config.Global.hostURL + \"/vote/\").toLowerCase())) {\r\n            var id = data.substring(data.indexOf(\"/vote/\") + 6).replace(/\\W/g, '');\r\n            this.setState({ eventID: id });\r\n            this.requestConfirm();\r\n        }\r\n    }\r\n\r\n    handleText() {\r\n        if (this.state.idFieldValue.length > 2) {\r\n            this.setState({ eventID: this.state.idFieldValue });\r\n            this.requestConfirm();\r\n        }\r\n    }\r\n\r\n    handleJoinEvent() {\r\n        //TODO: Join the event\r\n        this.props.handler(this.props.voteViews.RANK, this.state.eventID, this.state.organizerID);\r\n    }\r\n\r\n    handleError(err) { }\r\n\r\n    keyPress(e) {\r\n        if (e.key === 'Enter') {\r\n            this.handleText();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <EntryConfirmation entryName={this.state.eventName} ref={this.confirmChild} handler={this.handleJoinEvent} />\r\n                <QrReader delay={300} onScan={this.handleScan} onError={this.handleError} style={{ width: '80%', margin: '20px auto 0px' }} />\r\n                <Typography variant='h5' align='center' className=\"QRText\">Scan QR Code or enter Event ID:</Typography>\r\n                <div className=\"textField\">\r\n                    <TextField\r\n                        id=\"outlined-dense\"\r\n                        label=\"Event ID\"\r\n                        margin=\"dense\"\r\n                        variant=\"outlined\"\r\n                        value={this.state.idFieldValue}\r\n                        onKeyDown={this.keyPress}\r\n                        onChange={e => this.setState({ idFieldValue: e.target.value })}\r\n                    />\r\n                </div>\r\n                <div className=\"submitButtonContainer\">\r\n                    <Button variant=\"contained\" color=\"default\" className=\"homeButton\" onClick={this.handleText}>\r\n                        Join\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}